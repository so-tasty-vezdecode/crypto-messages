{"version":3,"sources":["components/EncryptModal.js","components/EncryptForm.js","components/DecryptForm.js","App.js","index.js"],"names":["EncryptModal","isVisible","closeModal","encryptedMessage","secretKey","title","visible","onOk","onCancel","layout","column","Item","label","Text","strong","copyable","EncryptForm","useState","isModalVisible","setModalVisibility","isSubmitting","setSubmitting","messageData","setMessageData","toggleModal","useCallback","onSubmit","values","a","fetch","method","header","body","message","response","json","error","onFinish","name","rules","required","type","htmlType","loading","DecryptForm","decryptedMessage","setMessage","headers","JSON","stringify","value","placeholder","TabPane","Tabs","App","activeTab","setActiveTab","activeKey","onChange","className","tab","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7feb9ab.chunk.js","sourcesContent":["import { Descriptions, Modal, Typography } from 'antd';\n\nconst EncryptModal = ({ isVisible, closeModal, encryptedMessage, secretKey }) => {\n    return (\n        <>\n            <Modal title=\"Данные о сообщении\" visible={isVisible} onOk={closeModal} onCancel={closeModal}>\n                <Descriptions layout=\"vertical\" column={1}>\n                    <Descriptions.Item label={<Typography.Text strong>Зашифрованное сообщение</Typography.Text>}>\n                        <Typography.Text copyable>{encryptedMessage}</Typography.Text>\n                    </Descriptions.Item>\n                    <Descriptions.Item label={<Typography.Text strong>Ключ для расшифровки</Typography.Text>}>\n                        <Typography.Text copyable>{secretKey}</Typography.Text>\n                    </Descriptions.Item>\n                </Descriptions>\n            </Modal>\n        </>\n    );\n};\n\nexport default EncryptModal;\n","import { Button, Form, message } from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\nimport { useCallback, useState } from 'react';\nimport EncryptModal from './EncryptModal';\n\nconst EncryptForm = () => {\n    const [isModalVisible, setModalVisibility] = useState(false);\n    const [isSubmitting, setSubmitting] = useState(false);\n\n    const [messageData, setMessageData] = useState({\n        encryptedMessage: null,\n        secretKey: null,\n    });\n\n    const toggleModal = useCallback(() => {\n        setModalVisibility(!isModalVisible);\n    }, [isModalVisible]);\n\n    const onSubmit = async values => {\n        try {\n            setSubmitting(true);\n\n            const response = await fetch('https://us-central1-sql-academy-285317.cloudfunctions.net/encrypt', {\n                method: 'POST',\n                header: {\n                    'Content-Type': 'text/plain',\n                },\n                body: values.message,\n            });\n\n            const messageData = await response.json();\n\n            setModalVisibility(true);\n\n            setMessageData(messageData);\n        } catch (e) {\n            message.error('Не удалось сохранить сообщение.');\n        } finally {\n            setSubmitting(false);\n        }\n    };\n\n    return (\n        <>\n            <EncryptModal\n                isVisible={isModalVisible}\n                closeModal={toggleModal}\n                {...messageData}\n            />\n            <Form onFinish={onSubmit} layout=\"vertical\">\n                <Form.Item label=\"Сообщение\" name=\"message\" rules={[{ required: true, message: 'Введите сообщение!' }]}>\n                    <TextArea />\n                </Form.Item>\n\n                <Button type=\"primary\" htmlType=\"submit\" loading={isSubmitting}>\n                    Submit\n                </Button>\n            </Form>\n        </>\n    );\n};\n\nexport default EncryptForm;\n","import { useState } from 'react';\n\nimport { Button, Divider, Form, message } from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\n\nconst DecryptForm = () => {\n    const [decryptedMessage, setMessage] = useState('');\n    const [isSubmitting, setSubmitting] = useState(false);\n\n    const onSubmit = async values => {\n        try {\n            setSubmitting(true);\n\n            const response = await fetch('https://us-central1-sql-academy-285317.cloudfunctions.net/decrypt', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(values),\n            });\n\n            const messageData = await response.json();\n\n            setMessage(messageData.decryptedMessage);\n        } catch (e) {\n            message.error('Не удалось сохранить сообщение.');\n        } finally {\n            setSubmitting(false);\n        }\n    };\n\n    return (\n        <>\n            <Form onFinish={onSubmit} layout=\"vertical\">\n                <Form.Item label=\"Зашифрованное сообщение\" name=\"encryptedMessage\" rules={[{ required: true, message: 'Введите сообщение!' }]}>\n                    <TextArea />\n                </Form.Item>\n\n                <Form.Item label=\"Секретный ключ\" name=\"secretKey\" rules={[{ required: true, message: 'Введите ключ!' }]}>\n                    <TextArea />\n                </Form.Item>\n\n                <Button type=\"primary\" htmlType=\"submit\" loading={isSubmitting}>\n                    Submit\n                </Button>\n            </Form>\n\n            <Divider />\n\n            <TextArea value={decryptedMessage} placeholder=\"Расшифрованное сообщение\" />\n        </>\n    );\n};\n\nexport default DecryptForm;\n","import React, { useState } from 'react';\n\nimport { Tabs } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport EncryptForm from './components/EncryptForm';\nimport DecryptForm from './components/DecryptForm';\n\nconst { TabPane } = Tabs;\n\nfunction App() {\n    const [activeTab, setActiveTab] = useState('encrypt');\n\n    return (\n        <Tabs activeKey={activeTab} onChange={setActiveTab} className=\"crypto-tabs\">\n            <TabPane tab=\"Шифрование\" key=\"encrypt\">\n                <EncryptForm />\n            </TabPane>\n            <TabPane tab=\"Дешифрование\" key=\"decrypt\">\n                <DecryptForm />\n            </TabPane>\n        </Tabs>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}